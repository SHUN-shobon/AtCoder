# Path to the test file (Liquid template)
#
# Variables:
#
# - `manifest_dir`: Package directory
# - `contest`:      Contest ID (e.g. "abc100")
# - `bin_name`:     Name of a `bin` target (e.g. "abc100-a")
# - `bin_alias`:    "Alias" for a `bin` target defined in `pacakge.metadata.cargo-compete` (e.g. "a")
# - `problem`:      Alias for `bin_alias` (deprecated)
#
# Additional filters:
#
# - `kebabcase`: Convert to kebab case (by using the `heck` crate)
test-suite = "{{ manifest_dir }}/testcases/{{ bin_alias }}.yml"

# Open files with the command (`jq` command that outputs `string[] | string[][]`)
#
# VSCode:
#open = '[["code", "-a", .manifest_dir], ["code"] + (.paths | map([.src, .test_suite]) | flatten)]'
# Emacs:
#open = '["emacsclient", "-n"] + (.paths | map([.src, .test_suite]) | flatten)'

[template]
src = '''
#![allow(dead_code)]
#![allow(unused_imports)]
use itertools::Itertools;
use proconio::fastout;
use proconio::input;
use proconio::marker::{Bytes, Chars};
use std::collections::*;
use std::iter::FromIterator;
use superslice::Ext;

#[fastout]
fn main() {
    input! {}
}
'''

[template.new]
# `edition` for `Cargo.toml`.
edition = "2018"
# `profile` for `Cargo.toml`.
#
# By setting this, you can run tests with `opt-level=3` while enabling `debug-assertions` and `overflow-checks`.
#profile = '''
#[dev]
#opt-level = 3
#'''
dependencies = '''
# 数値型の抽象化、多倍長整数、複素数、分数、及び整数型の拡張
num = "=0.2.1"
num-bigint = "=0.2.6"
num-complex = "=0.2.4"
num-integer = "=0.1.42"
num-iter = "=0.1.40"
num-rational = "=0.2.4"
num-traits = "=0.2.11"

# `num-traits`の自動実装
num-derive = "=0.3.0"

# NumPyの`ndarray`のような多次元配列
ndarray = "=0.13.0"

# 線形代数
nalgebra = "=0.20.0"

# (線形)代数の抽象化
alga = "=0.9.3"

# libmのRust実装
libm = "=0.2.1"

# 乱数
rand = { version = "=0.7.3", features = ["small_rng"] }
getrandom = "=0.1.14"
rand_chacha = "=0.2.2"
rand_core = "=0.5.1"
rand_hc = "=0.2.0"
rand_pcg = "=0.2.1"

# 乱数の分布の追加
rand_distr = "=0.2.2"

# グラフ
petgraph = "=0.5.0"

# 挿入順を保持するhash table
indexmap = "=1.3.2"

# 正規表現
regex = "=1.3.6"

# staticアイテムの遅延初期化
lazy_static = "=1.4.0"

# `NotNan<f64>`, `OrderedFloat<f64>`
ordered-float = "=1.0.2"

# ASCII文字列
ascii = "=1.0.0"

# permutation
permutohedron = "=0.2.4"

# スライスの拡張
superslice = "=1.0.0"

# イテレータの拡張
itertools = "=0.9.0"

# イテレータの拡張（一次元累積和と浮動小数点数の等差数列）
itertools-num = "=0.1.3"

# `BTreeMap`, `BTreeSet`, `HashMap`, `HashSet`のリテラル用マクロ
maplit = "=1.0.2"

# 即席enum `Either<L, R>`
either = "=1.5.3"

# `BTreeMap`, `BTreeSet`, `HashMap`, `HashSet`, `Vec`の永続データ構造版
im-rc = "=14.3.0"

# 可変長bit set
fixedbitset = "=0.2.0"

# 可変長bit set
bitset-fixed = "=0.1.0"

# 競技プログラミングの入出力サポートその1
proconio = { version = "=0.3.6", features = ["derive"] }

# 競技プログラミングの入出力サポートその2
text_io = "=0.1.8"

# 競技プログラミングの入出力サポートその3
whiteread = "=0.5.0"

# 高速なハッシュ関数
rustc-hash = "=1.1.0"

# ある長さまでは要素を「直に」持つ可変長配列
smallvec = "=1.2.0"
'''
dev-dependencies = '''
#atcoder-202004-lock = { git = "https://github.com/qryxip/atcoder-202004-lock" }
'''

[template.new.copy-files]

[new]
kind = "cargo-compete"
# Platform
#
# - atcoder
# - codeforces
# - yukicoder
platform = "atcoder"
# Path (Liquid template)
#
# Variables:
#
# - `contest`:      Contest ID. **May be nil**
# - `package_name`: Package name
path = "./{{ contest }}"

#[new]
#kind = "oj-api"
#url = "https://atcoder.jp/contests/{{ id }}"
#path = "./{{ contest }}"

# for Library-Checker
#[add]
#url = "https://judge.yosupo.jp/problem/{{ args[0] }}"
##is-contest = ["false"] # optional
##target-kind = "bin" # ["bin", "example"]. default to "bin"
#bin-name = '{{ args[0] }}'
##bin-alias = '{{ args[0] }}' # optional
##bin-src-path = './src/bin/{{ bin_alias }}.rs' # optional

# for yukicoder
#[add]
#url = '{% case args[0] %}{% when "contest" %}https://yukicoder.me/contests/{{ args[1] }}{% when "problem" %}https://yukicoder.me/problems/no/{{ args[1] }}{% endcase %}'
#is-contest = ["bash", "-c", '[[ $(cut -d / -f 4) == "contests" ]]'] # optional
##target-kind = "bin" # ["bin", "example"]. default to "bin"
#bin-name = '{% assign segments = url | split: "/" %}{{ segments[5] }}'
##bin-alias = '{% assign segments = url | split: "/" %}{{ segments[5] }}' # optional
##bin-src-path = './src/bin/{{ bin_alias }}.rs' # optional

[test]
# Toolchain for the test. (optional)
toolchain = "1.42.0"
# Profile for `cargo build`. ("dev" | "release")
#
# Defaults to `"dev"`.
#profile = "dev"

#[submit.transpile]
#kind = "command"
#args = ["cargo", "equip", "--exclude-atcoder-crates", "--resolve-cfgs", "--remove", "docs", "--minify", "libs", "--rustfmt", "--check", "--bin", "{{ bin_name }}"]
##language_id = ""
